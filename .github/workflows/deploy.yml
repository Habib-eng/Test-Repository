name: Neuroparser CD Pipeline
on:
    push:
        branches:
            - develop
jobs:
    build-stage-deploy:
        runs-on: self-hosted
        steps:
            - name: Checkout code
              uses: actions/checkout@v2

              
            - name: Setup AWS ECR Details
              uses: aws-actions/configure-aws-credentials@v4
              with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: ${{ secrets.AWS_REGION }}
            
            - name: Login to Amazon ECR
              id: login-pf-aws-ecr
              uses: aws-actions/amazon-ecr-login@v2

            - name: Build and push the tagged docker image to Amazon ECR
              env:
                ECR_REGISTRY: ${{ steps.login-pf-aws-ecr.outputs.registry }}
                ECR_REPOSITORY: neuroparser-backend
                IMAGE_TAG: ${{ github.sha }}
              run: |                
                echo SQL_DB_NAME=${{secrets.SQLDB_CREDS_NAME}} SQL_DB_USER=${{secrets.SQLDB_CREDS_USERNAME}}
                echo $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
                docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG --build-arg SQL_DB_NAME=${{secrets.SQLDB_CREDS_NAME}} --build-arg SQL_DB_USER=${{secrets.SQLDB_CREDS_USERNAME}} --build-arg SQL_DB_PASSWORD=${{secrets.SQLDB_CREDS_PASSWORD }} --build-arg SQL_DB_HOST=${{ secrets.SQLDB_CREDS_HOST }} --build-arg SQL_DB_PORT=${{ secrets.SQLDB_CREDS_PORT }} --build-arg NOSQL_DB_NAME=${{ secrets.NOSQLDB_CREDS_NAME }} --build-arg NOSQL_DB_USER=${{secrets.NOSQLDB_CREDS_USERNAME }} --build-arg NOSQL_DB_PASSWORD=${{secrets.NOSQL_CREDS_PASSWORD }} --build-arg NOSQL_DB_HOST=${{secrets.NOSQL_CREDS_HOST }} --build-arg NOSQL_DB_PORT=${{secrets.NOSQL_CREDS_PORT }} --build-arg APP_URL=${{ secrets.APP_URL }} --build-arg DOMAIN=${{ secrets.DOMAIN }} --build-arg JWT_SECRET=${{ secrets.JWT_SECRET }} --build-arg APP_SECRET=${{ secrets.APP_URL }} --build-arg DEFAULT_FROM_EMAIL=${{ secrets.DEFAULT_FROM_EMAIL }} --build-arg EMAIL_HOST=${{ secrets.EMAIL_HOST }} --build-arg EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER}} --build-arg EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }} --build-arg EMAIL_PORT=${{ secrets.EMAIL_PORT }} --build-arg EMAIL_USE_TLS=${{ secrets.EMAIL_USE_TLS }} --no-cache .
                docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
                
            - name: Deploy to EC2
              uses: appleboy/ssh-action@master
              with:
                host: ${{ secrets.EC2_HOST }}
                username: ${{ secrets.USER_HOST }}
                password: ${{ secrets.PASSWORD_HOST }}
                script: docker container run -d --name web_service --network host $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
